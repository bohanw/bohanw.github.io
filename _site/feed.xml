<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-08T23:24:50-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Overview of KV store interview problems</title><link href="http://localhost:4000/2024/05/17/overview-of-cache.html" rel="alternate" type="text/html" title="Overview of KV store interview problems" /><published>2024-05-17T00:00:00-07:00</published><updated>2024-05-17T00:00:00-07:00</updated><id>http://localhost:4000/2024/05/17/overview-of-cache</id><content type="html" xml:base="http://localhost:4000/2024/05/17/overview-of-cache.html"><![CDATA[<p>Over the several months of interviews I frequently encountered problems to design KV store, cache, of various flavors. This post is intended to summarize thought processes to following problems, and to identify any patterns, if possible, to similar problems. For simplicity, I will assume all key values in these problems are integers.</p>

<p>For cache, at least it should support the put(k, v) and get(k) API. Eviction logic is also critical key.</p>

<h1 id="lru">LRU</h1>

<p>LRU cache, from the leetcode quesiton prompt, takes a capacity argument for maximum size and, two API get and put() in average O(1) time complexity.  Key challenge is to maintain the least-recently used</p>

<ul>
  <li>eviction policy when cache is full.</li>
  <li>access or update to a key already exists in cache.</li>
</ul>

<p>Modeling the order of access can use a linked list of key-value pairs where the head is the least recently used, and the tail is the most recently used. Linked list offers O(1) on insert and remove. However LinkedList does not provide O(1) time complexity to update cache by the correct index whenever a key is recently accessed by either get or put, so we need a another data structure to bookkeep current keys inside the cache. LinkedList  offers O(1) to remove or insert a node, and we can take advantage of the doubly linked list with both prev and next pointer.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Linked List node class </span>
    <span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
        <span class="nc">Node</span> <span class="n">prev</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">key</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
        
        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">){</span>
            <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

		
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">;</span><span class="c1">//capacity of the </span>
    <span class="kd">private</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Node</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// integer key to the linked node that stores the key </span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// head node, beginning of the </span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">tail</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// end of linked list</span>
    
    <span class="kd">public</span> <span class="nf">LRUCache</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">tail</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tail</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">head</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>The head is the least recently used key,  and the tail should be most recently accessed element.</p>

<p>To maintain readability we can add two new functions to handle removing node from the lined list and update a node to the end</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// append curr to the tail from the most recent access</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="nc">Node</span> <span class="n">curr</span><span class="o">){</span>
        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
        <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>
        <span class="n">curr</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
        <span class="n">tail</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//Remove key from old index from the most recent access(put/get)</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">Node</span> <span class="n">curr</span><span class="o">){</span>
        <span class="n">curr</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span><span class="o">=</span>  <span class="n">curr</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>With the help of data structure and two utility functions, we can implement the required APIs as follows</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">)){</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>  
        <span class="nc">Node</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        
        <span class="c1">//update the previous AND next node pointer because once</span>
        <span class="c1">//current node is accessed, it will be removed and moved to the tail</span>
        <span class="c1">//to maintain LRU</span>
        <span class="n">remove</span><span class="o">(</span><span class="n">curr</span><span class="o">);</span>
        <span class="n">update</span><span class="o">(</span><span class="n">curr</span><span class="o">);</span> <span class="c1">// move to tail</span>
        
        <span class="k">return</span> <span class="n">curr</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// if key already exists in the cache</span>
        <span class="c1">// node with the key is accessed so need to remove</span>
        <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">)){</span>
            <span class="nc">Node</span> <span class="n">oldNode</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">remove</span><span class="o">(</span><span class="n">oldNode</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Node</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">newNode</span><span class="o">);</span>
        <span class="n">update</span><span class="o">(</span><span class="n">newNode</span><span class="o">);</span>     
        <span class="c1">//exceeds capacity, need evict LRU key, that is the node at the beggining</span>
        <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">capacity</span><span class="o">){</span>
            <span class="nc">Node</span> <span class="n">nodeToRemove</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">remove</span><span class="o">(</span><span class="n">nodeToRemove</span><span class="o">);</span>
            <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nodeToRemove</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<h1 id="lfu">LFU</h1>

<p>Least frequently used mechanism, as the name suggests, requires keeping track of frequencies of each key.
Following the leetcode [problem prompt][] and API restrictions as follows</p>
<ul>
  <li>LFU cache constructor takes an arugment of int capacity</li>
  <li>LFU maintains a user counter for each key.</li>
  <li><code class="language-plaintext highlighter-rouge">int get(key)</code> to obtain the value of given key</li>
  <li><code class="language-plaintext highlighter-rouge">void put(key, value)</code> set thew new pair of</li>
</ul>

<h1 id="snapshot--based-kv">Snapshot  Based KV</h1>

<p>This is a popular phone screen question from a startup,very similar to Leetcode 1146.</p>
<h1 id="transactional-kv-store">Transactional KV store</h1>

<h1 id="expiry-priority-cache">Expiry Priority Cache</h1>

<h1 id="review">Review</h1>
<ul>
  <li>Understand the problem is crucial with communication with the interviewer.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Over the several months of interviews I frequently encountered problems to design KV store, cache, of various flavors. This post is intended to summarize thought processes to following problems, and to identify any patterns, if possible, to similar problems. For simplicity, I will assume all key values in these problems are integers.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/05/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-05-16T17:28:46-07:00</published><updated>2024-05-16T17:28:46-07:00</updated><id>http://localhost:4000/jekyll/update/2024/05/16/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/05/16/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>